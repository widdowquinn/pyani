package "nucmer"
description "nucmer generates nucleotide alignments between two mutli-FASTA input
files. The out.delta output file lists the distance between insertions
and deletions that produce maximal scoring alignments between each
sequence. The show-* utilities know how to read this format.

By default, nucmer uses anchor matches that are unique in in the
reference but not necessarily unique in the query. See --mum and
--maxmatch for different bevahiors."

option("mum") {
  description "Use anchor matches that are unique in both the reference and query"
  off }
option("maxmatch") {
  description "Use all anchor matches regardless of their uniqueness"
  off; conflict "mum" }
option("b", "breaklen") {
  description "Set the distance an alignment extension will attempt to extend poor scoring regions before giving up"
  uint32; default 200 }
option("c", "mincluster") {
  description "Sets the minimum length of a cluster of matches"
  uint32; default 65 }
option("D", "diagdiff") {
  description "Set the maximum diagonal difference between two adjacent anchors in a cluster"
  uint32; default 5 }
option("d", "diagfactor") {
  description "Set the maximum diagonal difference between two adjacent anchors in a cluster as a differential fraction of the gap length"
  double; default 0.12 }
option("noextend") {
  description "Do not perform cluster extension step"
  off }
option("f", "forward") {
  description "Use only the forward strand of the Query sequences"
  off }
option("g", "maxgap") {
  description "Set the maximum gap between two adjacent matches in a cluster"
  uint32; default 90 }
option("l", "minmatch") {
  description "Set the minimum length of a single exact match"
  uint32; default 20 }
option("L", "minalign") {
  description "Minimum length of an alignment, after clustering and extension"
  uint32; default 0 }
option("nooptimize") {
  description "No alignment score optimization, i.e. if an alignment extension reaches the end of a sequence, it will not backtrack to optimize the alignment score and instead terminate the alignment at the end of the sequence"
  off }
option("r", "reverse") {
  description "Use only the reverse complement of the Query sequences"
  off; conflict "forward" }
option("nosimplify") {
  description "Don't simplify alignments by removing shadowed clusters. Use this option when aligning a sequence to itself to look for repeats"
  off }
option("p", "prefix") {
  description "Write output to PREFIX.delta"
  string; typestr "PREFIX"; default "out" }
option("delta") {
  description "Output delta file to PATH (instead of PREFIX.delta)"
  c_string; typestr "PATH"; conflict "prefix" }
option("sam-short") {
  description "Output SAM file to PATH, short format"
  c_string; typestr "PATH"; conflict "prefix", "delta" }
option("sam-long") {
  description "Output SAM file to PATH, long format"
  c_string; typestr "PATH"; conflict "prefix", "delta", "sam-short" }
option("save") {
  description "Save suffix array to files starting with PREFIX"
  string; typestr "PREFIX" }
option("load") {
  description "Load suffix array from file starting with PREFIX"
  string; typestr "PREFIX" }
option("batch") {
  description "Proceed by batch of chunks of BASES from the reference"
  uint64; typestr "BASES"
  conflict "save", "load" }
option("t", "threads") {
  description "Use NUM threads (2)"
  uint32; typestr "NUM" }

# Hidden / experimental options
option("banded") {
  description "Enforce absolute banding of dynamic programming matrix based on diagdiff parameter"
  off; hidden }
option("large") {
  description "Force the use of large offsets"
  off; hidden }
option("G", "genome") {
  description "Map genome to genome (long query sequences)"
  off; hidden }
option("M", "max-chunk") {
  description "Max chunk. Stop adding sequence for a thread if more than MAX already."
  uint64; typestr "MAX"; default 50000; hidden }

arg("ref") {
  description "Reference sequence file"
  c_string; typestr "path" }
arg("qry") {
  description "Query sequence file"
  c_string; typestr "path"
  multiple; }
