.. _pyani-requirements:

============
Requirements
============

The ``pyani`` package requires several other programs, packages and tools to run and develop. Many of these are automatically installed alongside ``pyani``, but some packages and tools must be installed separately.

This page describes requirements for ``pyani`` and how/why they are used.

.. TIP::
    For more information about installation of specific packages, please see the :ref:`pyani-installation` page.

^^^^^^^^^^^
``Python3``
^^^^^^^^^^^

``pyani`` is written in ``Python``, and the modern version of ``Python`` is ``Python3``. The legacy version of ``Python`` will not be maintained past 2020. ``pyani`` is written to use many features of ``Python3`` and will not run on ``Python2``.

- `Python3 <http://www.python.org>`_

^^^^^^^^^^^^^^^
``NCBI-BLAST+``
^^^^^^^^^^^^^^^

To carry out ANIb (average nucleotide identity using ``BLAST``) analysis, genome sequences are compared using the ``BLAST+`` tool, provided by NCBI. The ``BLAST+`` tool is the current, maintained version, and is completely rewritten with respect to the legacy ``BLAST`` package (see below).

- `NCBI-BLAST+ <https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download>`_

^^^^^^^^^^^^^^^^
``MUMmer`` v3.23
^^^^^^^^^^^^^^^^

To carry out ANIm (average nucleotide identity using ``MUMmer``) analysis, genome sequences are compared using the ``nucmer`` tool, part of the ``MUMmer`` package. Currently, ``pyani`` uses an older version of ``MUMmer`` for this analysis, pinned at version 3.23. ``pyani`` has not yet been tested with ``MUMmer`` 4.x.

- `MUMmer3 <http://mummer.sourceforge.net/>`_
- `MUMmer4 <https://github.com/mummer4/mummer>`_

^^^^^^^^^^^^^^^^^^^^^
Legacy ``NCBI-BLAST``
^^^^^^^^^^^^^^^^^^^^^

An alternative implementation of ANIb (average nucleotide identity using ``BLAST``), included for compatibility checks with other ANI calculation software is provided in ``pyani`` through the legacy script ``average_nucleotide_identity.py``. The use of the legacy ``aniblastall`` analysis is not recommended, and NCBI do not recommend use of the legacy ``NCBI-BLAST`` tool. However, the legacy software can still be downloaded and installed, for the curious and those who wish to test legacy compatibility.

- `Legacy NCBI-BLAST (not supported) <ftp://ftp.ncbi.nlm.nih.gov/blast/executables/legacy.NOTSUPPORTED/>`_

^^^^^^^^^^^^^^^^^
``fastANI`` v1.32
^^^^^^^^^^^^^^^^^

To carry out fastANI (average nucleotide identity using ``fastANI``) analysis, genome sequences are compared using the ``fastANI`` tool.

- `fastANI <https://github.com/ParBLiSS/FastANI>`_

^^^^^^^
SQLite3
^^^^^^^

The output generated by ``pyani`` analyses is stored in a local database, provided by ``SQLite3``, for rapid querying and recovery. This allows for persistent storage of results without the need to keep the original alignment files, and for incremental addition of new analyses. ``SQLite`` is installed with ``Python``

- `SQLite <https://sqlite.org/index.html>`_

^^^^^^^^^^^^^^^^^^^
Open Grid Scheduler
^^^^^^^^^^^^^^^^^^^

When running on a cluster, ``pyani`` currently schedules jobs using the Sun Grid Engine/Open Grid Engine/Open Grid Scheduler syntax. Your cluster will require a compatible scheduler for ``pyani`` to distribute jobs appropriately:

- `Open Grid Scheduler <http://gridscheduler.sourceforge.net/>`_

^^^^^^^^^^^^^^^
Python Packages
^^^^^^^^^^^^^^^

``pyani`` relies on functionality provided by a number of additional Python packages, and we gratefully acknowledge their contribution:

- `Biopython <https://biopython.org/>`_: for working with biological data formats
- `Matplotlib <https://matplotlib.org/>`_: for graphical output
- `NetworkX <https://networkx.github.io/>`_: for graph calculations and representation
- `Numpy <https://numpy.org/>`_: for matrix calculations
- `OpenPyXL <https://openpyxl.readthedocs.io/en/stable/>`_: for MicroSoft Excel output compatibility
- `Pandas <https://pandas.pydata.org/>`_: for dataframe operations
- `Pillow <https://python-pillow.org/>`_: for graphics manipulation and rendering
- `SciPy <https://www.scipy.org/>`_: for scientific computing operations
- `Seaborn <https://seaborn.pydata.org/index.html>`_: for graphical output
- `SQLAlchemy <https://www.sqlalchemy.org/>`_: (pinned at v1.2.18 for compatibility reasons) for interaction with ``SQLite3``
- `tqdm <https://tqdm.github.io/>`_: provides progress bars for user interaction

-----------
Development
-----------

We rely on a number of additional packages to aid ``pyani`` development, and if you set up a development environment as recommended in :ref:`pyani-contributing`, then the following Python packages will be installed or expected to be present:

- `bandit <https://pypi.org/project/bandit/>`_: to check for security issues in the codebase
- `black <https://black.readthedocs.io/en/stable/>`_: to enforce consistent, opinionated code formatting
- `codecov <https://docs.codecov.io/docs/python>`_: to generate code coverage output for the `codecov.io`_ service
- `coverage <https://coverage.readthedocs.io/en/v4.5.x/>`_: to generate code coverage output for local inspection
- `doc8 <https://pypi.org/project/doc8/>`_: to check docstring formatting syntax
- `flake8 <https://pypi.org/project/flake8/>`_: for code linting
- `jinja2 <http://jinja.pocoo.org/>`_: for output/docfile templating
- `pre-commit <https://pre-commit.com/>`_: for checking code style and quality prior to ``git`` commit
- `pylint <https://www.pylint.org/>`_: for code linting
- `pytest <https://pytest.org/en/latest/>`_: to manage and run automated testing
- `pytest-cov <https://pypi.org/project/pytest-cov/>`_: to integrate ``pytest`` with ``codecov`` and ``coverage``
- `pytest-ordering <https://pytest-ordering.readthedocs.io/en/develop/>`_: to ensure ``pytest`` test ordering
- `sphinx <https://www.sphinx-doc.org/en/master/>`_: to generate documentation
- `sphinx-rtd-theme <https://sphinx-rtd-theme.readthedocs.io/en/stable/>`_: to provide local ``ReadTheDocs`` style formatting

.. _codecov.io: https://codecov.io/
